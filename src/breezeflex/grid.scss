@use 'user_options/user_options' as options;

.container {
	display: flex;
	flex-wrap: wrap;
	flex-direction: column;
}


//## Grid styling allows bootstrap like positionning

@mixin row{
	display: flex;
	flex-wrap: wrap;
	box-sizing: border-box;
	flex-grow: 1;
	flex-basis: 100%;
	flex-shrink: 0;
}

@mixin col{
	flex-basis: 0;
	flex-shrink: 1;
	flex-grow: 1;
	box-sizing: border-box;
}

.row{
	@include row();
}

.col{
	@include col();
}

.no-wrap{
	flex-wrap: nowrap;
}


.align-center{
	align-content: center;
}
.align-top,.align-start{
	align-content: flex-start;
}

.align-bottom,.align-end{
	align-content: flex-end;
}

.justify-center{
	justify-content: center;
}
.justify-left,.justify-start{
	justify-content: flex-start;
}
.justify-right,.justify-end{
	justify-content: flex-end;
}


@mixin col-offset($percentage){
	margin-inline-start: $percentage;
}


.col-offset-0{
	@include col-offset(0);
}

@mixin col-size($percentage){
	@include col();
	flex-basis: $percentage;
}


//## Grid style generator uses @mixins to load classes inside @media



//# Responsible of creating the classes
@each $name , $size in options.$sizes{
	//# Here we create the classes for the smallest size. 
	//# Since the smallest size is also the fallback, the classes names shouldn't reference the size.
	@if $size == 0px{

		@for $i from 1 through options.$col_max_amount{



			$percentage: calc( ((100% / options.$col_max_amount) * $i)) - 1%; 

			.col-#{$i}{
				@include col-size($percentage);
			}

			.col-offset-#{$i}{
				@include col-offset($percentage)
			}
		}
	} @else{
		@media screen and (width >= $size) {
			.col-#{$name}-offset-0{
					@include col-offset(0);
			}
			.col-#{$name}{
				@include col();
				flex:1 0 auto;
			}
			@for $i from 1 through options.$col_max_amount{

				$percentage: calc( ((100% / options.$col_max_amount) * $i) - 1%);
				
				.col-#{$name}-#{$i}{
					@include col-size($percentage);
				}

				.col-#{$name}-offset-#{$i}{
					@include col-offset($percentage);
				}
			}
		}
	}
}

