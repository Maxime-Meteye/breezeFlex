@use 'sass:color';
@use 'sass:map';
@use 'sass:string';
@use 'user_options/user_options' as options;
@use 'utils';


:root{

	--btn-opacity : #{options.$btn-default-opacity};
	--btn-default-color : #{options.$btn-default-color};
	@each $name, $color, $text-color in options.$themes{

		@if $text-color == null{
			$text-color : utils.text-color-maker($color);
			--#{$name}-text-color : #{$text-color};
		}@else{
			--#{$name}-text-color : #{$text-color};
		}

		--#{$name}-color : 
			#{color.channel($color,"red", $space: rgb)},
			#{color.channel($color,"green", $space: rgb)},
			#{color.channel($color,"blue", $space: rgb)}
		;

		$hover-color:white;
		@if color.channel($text-color, "lightness",$space : hsl) <= 50% {
			$hover-color : color.scale($color, $lightness: -15%, $space: hsl);
		}@else{
			$hover-color : color.scale($color, $lightness: +15%, $space: hsl);
		}

		--#{$name}-hover : 
			#{color.channel($hover-color,"red", $space: rgb)},
			#{color.channel($hover-color,"green", $space: rgb)},
			#{color.channel($hover-color,"blue", $space: rgb)}
		;
		
		$active-color:white;
		@if color.channel($color,"lightness", $space: hsl) >= 50% {
			$active-color : color.scale($color, $lightness: -25%, $space: hsl);
		}@else{
			$active-color : color.scale($color, $lightness: +25%, $space: hsl);
		}

		--#{$name}-active : 
			#{color.channel($active-color,"red", $space: rgb)},
			#{color.channel($active-color,"green", $space: rgb)},
			#{color.channel($active-color,"blue", $space: rgb)}
		;
		--#{$name}-border-color : #{color.scale($color, $lightness: -50%, $space: hsl)};
	}
}


//## BTN classes

.btn{
	color: var(--text-color);
	border-radius: 1em;
	width: auto;
	height: auto;
	min-width: 2em;
	min-height: 1em;
	padding: 1px 6px;
	background-color: rgb($color: var(--background-color,var(--btn-default-color)), $alpha: var(--btn-opacity) );

	transition: all 0.15s ease-in;
}

.btn-transparent{
	--btn-opacity: #{options.$tint-opacity};
	border-radius: 1em;
	color: grey;
	width: auto;
	height: auto;
	min-width: 2em;
	min-height: 1em;
	padding: 1px 6px;
	background-color: rgba($color: var(--background-color,var(--btn-default-color)), $alpha: var(--btn-opacity) );
	color: black;
	transition: all 0.15s ease-in;
}
.btn:hover,.btn-transparent:hover{
	transform: translateY(-2px);
	background-color: rgba($color:var(--background-on-hover), $alpha: var(--btn-opacity));
}

.btn:active,.btn-transparent:active{
	transform: translateY(2px);
	background-color: rgba($color:var(--background-on-active), $alpha: var(--btn-opacity));
}


@each $name, $color, $text-color in options.$themes{

	.btn-#{$name}{
		--background-color : var(--#{$name}-color); 
		//background-color: rgb(var(--#{$name}-color));
		--text-color: var(--#{$name}-text-color);
		--background-on-hover : var(--#{$name}-hover);
		--background-on-active : var(--#{$name}-active);
		border: var(--border, solid 2px var(--#{$name}-border-color));
	}

	.#{$name}-tint{
		--background-color: var(--#{$name}-color);
		--tint-color: var(--#{$name}-color);
	}
	.hover-#{$name}-tint:hover{
		--background-color: var(--#{$name}-hover);
		--btn-opacity: #{options.$tint-opacity};
	}
	.active-#{$name}-tint:active{
		--background-color: var(--#{$name}-hover);
		--btn-opacity: #{options.$tint-opacity};
	}
}


.btn-hover-transparent:hover{
	--btn-opacity : #{options.$tint-opacity};
}
.btn-active-transparent:active{
	--btn-opacity : #{options.$tint-opacity};
}





@each $name, $color, $text-color in options.$themes{

	.theme-#{$name}{
		--background-color : var(--#{$name}-color);
		--text-color : var(--#{$name}-text-color);
		--border-color : var(--#{$name}-border-color);
		--border-style : solid;
		--border-width : 50px;
		background-color: rgb(var(--background-color));
		color: var(--text-color);
	}
}


.border,.border-a,.border-all{
	border: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-top{
	border-top: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-right{
	border-right: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-bottom{
	border-bottom: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-left{
	border-left: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-block,.border-y{
	border-block: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-block-start,.border-y-start{
	border-block-start: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-block-end,.border-y-end{
	border-block-end: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-inline,.border-x{
	border-inline: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-inline-start,.border-x-start{
	border-inline-start: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}
.border-inline-end,.border-x-end{
	border-inline-end: var(--border-width-scaled, var(--border-width)) var(--border-style) var(--border-color);
}

@each $name, $width in options.$spacing{
	.border-#{$name}{
		--border-width-scaled: #{$width};
	}
}